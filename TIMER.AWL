TYPE "TIMER_TYPE"
VERSION : 0.1


  STRUCT 	
   stParam : STRUCT 	
    tTime : TIME ;	
   END_STRUCT ;	
   tPast : TIME ;	//past time for monitoring
   stPrivate : STRUCT 	
    bFlagMem : BOOL ;	//save last state of input
    bReached : BOOL ;	//time reached
    diTicksPre : DINT ;	//save current ticks
   END_STRUCT ;	
  END_STRUCT ;	
END_TYPE

FUNCTION "TIMER_PULS" : VOID
TITLE =TIMER_PULS
//V1.0
//29.06.2023
//Herzog Cyril
VERSION : 0.1


VAR_INPUT
  bIn : BOOL ;	
END_VAR
VAR_OUTPUT
  bOut : BOOL ;	
END_VAR
VAR_IN_OUT
  pTimer_Type : "TIMER_TYPE";	
END_VAR
BEGIN
NETWORK
TITLE =

      SET   ; 
      L     P##pTimer_Type; 
      LAR1  ; 
      L     W [AR1,P#0.0]; 
      T     LW     0; 
      L     D [AR1,P#2.0]; 
      LAR1  ; 
      AUF   DB [LW 0]; 
// load all boolean variables => first word of the instance
// Bit0 = save old state of bIn
// Bit1 = timer state (true = time reached)
      L     DBW [AR1,P#8.0]; 
      T     LW     0; 
      U     #bIn; 
      FP    L      0.0; 
      UN    L      0.1; 
      S     L      0.1; 
      SPBN  j001; 
// Save current ticks
      L     "SysTick"; 
      T     DBD [AR1,P#10.0]; 
j001: U     L      0.1; 
      SPBN  j002; 
// if ((current_ticks - ticks_pre >= time_para) {...
      L     "SysTick"; 
      L     DBD [AR1,P#10.0]; // previous ticks
      -D    ; 
      T     DBD [AR1,P#4.0]; // past time
      L     DBD [AR1,P#0.0]; // time param
      >=D   ; 
      R     L      0.1; 
// save new state of boolean variables 
j002: L     LW     0; 
      T     DBW [AR1,P#8.0]; 
// set output
      U     L      0.1; 
      =     #bOut; 
      BE    ; 

END_FUNCTION

FUNCTION "TIMER_OFF" : VOID
TITLE =TIMER_TOF
//V1.0
//29.06.2023
//Herzog Cyril
VERSION : 0.1


VAR_INPUT
  bIn : BOOL ;	
END_VAR
VAR_OUTPUT
  bOut : BOOL ;	
END_VAR
VAR_IN_OUT
  pTimer_Type : "TIMER_TYPE";	
END_VAR
BEGIN
NETWORK
TITLE =

      SET   ; 
      L     P##pTimer_Type; 
      LAR1  ; 
      L     W [AR1,P#0.0]; 
      T     LW     0; 
      L     D [AR1,P#2.0]; 
      LAR1  ; 
      AUF   DB [LW 0]; 
// load all boolean variables => first word of the instance
// Bit0 = save old state of bIn
// Bit1 = timer state (true = time reached)
      L     DBW [AR1,P#8.0]; 
      T     LW     0; 
      U     #bIn; 
      FN    L      0.0; 
      SPBN  j001; 
// Save current ticks
      L     "SysTick"; 
      T     DBD [AR1,P#10.0]; 
j001: UN    L      0.0; 
      UN    L      0.1; 
      SPBN  j002; 
// if ((current_ticks - ticks_pre >= time_para) {...
      L     "SysTick"; 
      L     DBD [AR1,P#10.0]; // previous ticks
      -D    ; 
      T     DBD [AR1,P#4.0]; // past time
      L     DBD [AR1,P#0.0]; // time param
      >=D   ; 
      =     L      0.1; 
j002: U     L      0.0; 
      R     L      0.1; 
// save new state of boolean variables 
      L     LW     0; 
      T     DBW [AR1,P#8.0]; 
// set output
      UN    L      0.1; 
      =     #bOut; 
      BE    ; 

END_FUNCTION

FUNCTION "TIMER_ON" : VOID
TITLE =TIMER_ON
//V1.0
//29.06.2023
//Herzog Cyril
VERSION : 0.1


VAR_INPUT
  bIn : BOOL ;	
END_VAR
VAR_OUTPUT
  bOut : BOOL ;	
END_VAR
VAR_IN_OUT
  pTimer_Type : "TIMER_TYPE";	
END_VAR
BEGIN
NETWORK
TITLE =

      SET   ; 
      L     P##pTimer_Type; 
      LAR1  ; 
      L     W [AR1,P#0.0]; 
      T     LW     0; 
      L     D [AR1,P#2.0]; 
      LAR1  ; 
      AUF   DB [LW 0]; 
// load all boolean variables => first word of the instance
// Bit0 = save old state of bIn
// Bit1 = timer state (true = time reached)
      L     DBW [AR1,P#8.0]; 
      T     LW     0; 
      U     #bIn; 
      FP    L      0.0; 
      SPBN  j001; 
// Save current ticks
      L     "SysTick"; 
      T     DBD [AR1,P#10.0]; 
j001: U     L      0.0; 
      UN    L      0.1; 
      SPBN  j002; 
// if ((current_ticks - ticks_pre >= time_para) {...
      L     "SysTick"; 
      L     DBD [AR1,P#10.0]; // previous ticks
      -D    ; 
      T     DBD [AR1,P#4.0]; // past time
      L     DBD [AR1,P#0.0]; // time param
      >=D   ; 
      =     L      0.1; 
j002: UN    L      0.0; 
      R     L      0.1; 
// save new state of boolean variables 
      L     LW     0; 
      T     DBW [AR1,P#8.0]; 
// set output
      U     L      0.1; 
      =     #bOut; 
      BE    ; 

END_FUNCTION

